@startuml

skinparam groupInheritance 2

title "STAM: STand-off Annotation Model"

abstract class Resource {
    _resource_id : int
     uri : str
}

class TextResource {
    text : Option<str>
}

class AudioResource {
    data: Option<bytestr>
}

class ImageResource {
    data: Option<bytes>
}

class VideoResource {
    data: Option<bytes>
}

Resource <|-- TextResource
Resource <|-- AudioResource
Resource <|-- ImageResource
Resource <|-- VideoResource

class AnnotationSet {
    _set_id: int
    id: Option<str>
    annotations: [Annotation]
    _data: [AnnotationData]
    --
    <i>A collection of annotations</i>
    <i>(may be quite arbitrary)</i>
}

class Annotation {
    _annotation_id : int
    id: Option<str>
    data: [&AnnotationData]
    target: [Selector]
    source: [Selector]
    _referenced_by: [&Annotation]
    --
    <i>An instance of an annotation</i>
}

abstract class Selector {
    --
    <i>Selects the target</i>
    <i>(or source) of annotation</i>
}

class TextSelector {
    resource: &TextResource,
    offsets: [(begin: int, end: int)]
    ---
    <i>Selects a part of the text,</i>
    <i>(one or more contiguous spans)</i>
    <i>Offsets are unicode codepoints,</i>
    <i>zero-indexed, end is non-inclusive,</i>

}

class ResourceSelector {
    resources: [&Resource]
    ---
    <i>Selects one or more resources</i>
}

class AnnotationSelector {
    annotations: [&Annotation]
    --
    <i>Selects one or more annotations</i>
}

class ParallelSelector {
    selectors: [Selector]
    --
    <i>Combines selectors</i>
}

Selector <|-- TextSelector
Selector <|-- ResourceSelector
Selector <|-- AnnotationSelector
Selector <|-- ParallelSelector





class AnnotationData {
    _data_id : int
    id: Option<str>
    key: DataKey
    vocabulary: Option< &Vocabulary>
    value: DataValue
    _referenced_by: [&annotation]
    --
    <i>The value of the annotation</i>
    <i>Used for the body and for</i>
    <i>metadata</i>
}


class DataKey {
    namespace: Option< &Vocabulary>
    key: str
    --
    <i>Represents a key in any</i>
    <i>key/value map</i>
}


enum DataValue {
    Id(v: str)
    String(v: str)
    Bool(v: bool)
    Int(v: int)
    Float(v: float)
    Datetime(v: datetime)
    Map(v: Map<DataKey,DataValue>)
    List(v: [DataValue])
    --
    <i>Encapsulates a data value</i>
    <i>along with its type</i>
}

enum DataType {
    ID,
    STRING,
    BOOL,
    INT,
    FLOAT,
    DATETIME,
    MAP,
    LIST,
    --
    <i>Represents</i>
    <i>a data type</i>
}

class Vocabulary {
    _vocab_id: int
    id: Option<str>
    open: bool
    datatype: DataType
    options: [(value: DataValue, label: Option<String>)]
    min_value: Option<DataValue>,
    max_value: Option<DataValue>,
    _referenced_by: [&AnnotationData]
    --
    <i>Defines all possible values from which can be</i>
    <i>chosen and optionally attaches human-readable</i>
    <i>labels</i>
}

AnnotationSet "1" *--> "*" Annotation : > annotation
AnnotationSet "1" *-[#gray]-> "*" AnnotationData : > _data

Annotation "1" *--> "+" Selector : > target
Annotation "1" *--> "*" Selector : > source
Annotation "1" o--> "*" AnnotationData : > data
Annotation "1" -[#gray]-> "*" Annotation : > _referenced_by

AnnotationData "1" -[#gray]-> "+" Annotation : > _referenced_by
AnnotationData "1" *--> "1" DataValue : > value
AnnotationData "1" *--> "1" DataKey : > key
AnnotationData "1" --> "1" Vocabulary : > vocabulary

TextSelector "1" --> "1" TextResource : > offsets
AnnotationSelector "1" --> "+" Annotation : > annotations

DataValue "1" *--> "1" DataValue : > datavalue (Map)
DataValue "1" *--> "1" DataKey : > datakey (Map)

DataKey "1" --> "1" Vocabulary : > namespace

Vocabulary "1" --> "1" DataType : > datatype
Vocabulary "1" -[#gray]-> "+" AnnotationData : > _referenced_by
@enduml
